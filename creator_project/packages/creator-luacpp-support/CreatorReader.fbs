//
// Main FBS file
//


namespace creator.buffers;


enum FontType:byte { System = 0, BMFont = 1, TTF = 2 }
enum VerticalAlignment:byte { Top = 0, Center = 1, Bottom = 2 }
enum HorizontalAlignment:byte { Left = 0, Center = 1, Right = 2 }
enum SpriteType:byte {Simple, Sliced, Tiled, Filled}
enum SpriteSizeMode:byte {Custom, Trimmed, Raw}
enum ScrollViewDirection:byte {None, Vertical, Horizontal, Both}
enum EditBoxReturnType:byte {Default, Done, Send, Search, Go}
enum EditBoxInputFlag:byte {Password, Sensitive, InitialCapsWord, InitialCapsSentence, InitialCapsAllCharacters, LowercaseAllCharacters}
enum EditBoxInputMode:byte {Any, EmailAddress, Numeric, PhoneNumber, URL, Decime, SingleLine}
enum LabelOverflowType:byte {None, Clamp, Shrink, ResizeHeight}

// New nodes should be added at the end of the union
// no more than 255 union objects can be added
union AnyNode {Scene, Sprite, Label, Particle, TileMap, Node, Button, ProgressBar, ScrollView, CreatorScene, EditBox, RichText, SpineSkeleton}

table SceneGraph
{
    version:string;

    root:NodeTree;

    designResolution:Size;
    resolutionFitWidth:bool = false;
    resolutionFitHeight:bool = false;

    // Frames needed for the Scene
    spriteFrames:[SpriteFrame];
}

table NodeTree
{
    // Flatbuffers doesn't support array of unions
    // so split the tree from node
    children:[NodeTree];
    object:AnyNode;

    // no need to declare it, but required everytime that
    // object_type:string;
}

table SpriteFrame
{
    name:string;
    texturePath:string;
    rect:Rect;
    offset:Vec2;
    rotated:bool;
    originalSize:Size;
    centerRect:Rect;        // rect in pixels. top-left origin
}

table CreatorScene
{
    // fbs file. An fbs can contain another fbs
    filename:string;
}

//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
//
// Nodes
//
//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
table Node
{
    contentSize:Size;
    enabled:bool = true;
    name:string;
    anchorPoint:Vec2;
    cascadeOpacityEnabled:bool = true;
    color:ColorRGB;
    globalZOrder:float = 0;
    localZOrder:int = 0;
    opacity:ubyte = 255;
    opacityModifyRGB:bool = true;
    position:Vec2;
    rotationSkewX:float = 0;
    rotationSkewY:float = 0;
    scaleX:float = 1;
    scaleY:float = 1;
    skewX:float = 0;
    skewY:float = 0;
    tag:int = 0;
    anim:AnimationRef;
}

//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
// Render Nodes
//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
table Sprite
{
    node:Node;
    spriteFrameName:string;
    spriteType:SpriteType;
    srcBlend:int = 770;
    dstBlend:int = 771;
    trimEnabled:bool = false;
    sizeMode:SpriteSizeMode;
}

table Label
{
    node:Node;

    labelText:string;
    horizontalAlignment:HorizontalAlignment;
    verticalAlignment:VerticalAlignment;
    lineHeight:float;
    fontName:string;
    fontSize:float;
    fontType:FontType;
    overflowType:LabelOverflowType;
    enableWrap:bool;
}

table RichText
{
    node:Node;
    text:string;
    horizontalAlignment:HorizontalAlignment;
    fontSize:float;
    maxWidth:float;
    lineHeight:float;
    fontFilename:string;
}

table Particle
{
    node:Node;
    particleFilename:string;
}


table TileMap
{
    node:Node;
    tmxFilename:string;
    desiredContentSize:Size;
}

table Scene
{
    node:Node;
}

//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
// Render Nodes
//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
table Button
{
    node:Node;
    transition:int;
    zoomScale:float;
    spriteFrameName:string;
    pressedSpriteFrameName:string;
    disabledSpriteFrameName:string;
    ignoreContentAdaptWithSize:bool = false;
}

table ProgressBar
{
    node:Node;
    percent:float;
    backgroundSpriteFrameName:string;
    barSpriteFrameName:string;
    barSpriteType:int;
    reverse:bool;
}

table ScrollView
{
    node:Node;
    backgroundImage:string;                         // it is a spriteFrameName
    backgroundImageScale9Enabled:bool;
    backgroundImageColor:ColorRGB;
    direction:ScrollViewDirection;
    bounceEnabled:bool;
    innerContainerSize:Size;
}

table EditBox
{
    node:Node;
    backgroundImage:string;
    returnType:EditBoxReturnType;
    inputFlag:EditBoxInputFlag;
    inputMode:EditBoxInputMode;
    fontSize:int;
    fontColor:ColorRGB;
    placeholder:string;
    placeholderFontSize:int;
    placeholderFontColor:ColorRGB;
    maxLength:int;
    text:string;
}

//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
// Misc Nodes and extensions
//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
table SpineSkeleton
{
    node:Node;
    jsonFile:string;
    atlasFile:string;
    defaultSkin:string;
    defaultAnimation:string;
    loop:bool;
    premultipliedAlpha:bool;
    timeScale:float = 1;
    debugSlots:bool = false;
    debugBones:bool = false;
}

// this is part of the Node. It is a reference to
// an existing animation
table AnimationRef
{
    clips:[AnimationClip];
    playOnLoad:bool;
    defaultClip:string;
}


//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
//
// Animation
//
//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

enum AnimWrapMode:byte {Default, Normal, Loop, PingPong, Reverse, LoopReverse, PingPongReverse}

//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
// Animation Clip
//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
table AnimationClip
{
    // clip name
    name:string;
    duration:float;
    sample:float;
    speed:float;
    wrapMode:AnimWrapMode;
    curveData:[AnimCurveData];
}

table AnimCurveData
{
    path:string;
    props:AnimProps;
}

table AnimProps
{
    rotation:[AnimPropRotation];
    position:[AnimPropPosition];
    positionX:[AnimPropPositionX];
    positionY:[AnimPropPositionY];
    anchorX:[AnimPropAnchorX];
    anchorY:[AnimPropAnchorY];
    color:[AnimPropColor];
    opacity:[AnimPropOpacity];
    width:[AnimPropWidth];
    height:[AnimPropHeight];
    scaleX:[AnimPropScaleX];
    scaleY:[AnimPropScaleY];
    skewX:[AnimPropSkewX];
    skewY:[AnimPropSkewY];
}

table AnimEvents
{
    // FIXME: What goes here?
}

table AnimPropRotation
{
    frame:float;
    value:float;
}

table AnimPropPosition
{
    frame:float;
    value:Vec2;
}

table AnimPropPositionX
{
    frame:float;
    value:float;
}

table AnimPropPositionY
{
    frame:float;
    value:float;
}

table AnimPropScaleX
{
    frame:float;
    value:float;
}

table AnimPropScaleY
{
    frame:float;
    value:float;
}

table AnimPropWidth
{
    frame:float;
    value:float;
}

table AnimPropHeight
{
    frame:float;
    value:float;
}

table AnimPropColor
{
    frame:float;
    value:ColorRGBA;
}

table AnimPropOpacity
{
    frame:float;
    value:float;
}

table AnimPropAnchorX
{
    frame:float;
    value:float;
}

table AnimPropAnchorY
{
    frame:float;
    value:float;
}

table AnimPropSkewX
{
    frame:float;
    value:float;
}

table AnimPropSkewY
{
    frame:float;
    value:float;
}


//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
// Structs
//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
struct Vec2
{
    x:float;
    y:float;
}

struct Vec3
{
    x:float;
    y:float;
    z:float;
}

struct Size
{
    w:float;
    h:float;
}

struct Rect
{
    x:float;
    y:float;
    w:float;
    h:float;
}

// ColorRGB instead of RGB to avoid conflicts in windows, wince RGB is defined as a macro
struct ColorRGB
{
    r:ubyte;
    g:ubyte;
    b:ubyte;
}

struct ColorRGBA
{
    r:ubyte;
    g:ubyte;
    b:ubyte;
    a:ubyte;
}

//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
// Root and misc
//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
root_type SceneGraph;

file_identifier "CCRE";
file_extension "ccreator";
